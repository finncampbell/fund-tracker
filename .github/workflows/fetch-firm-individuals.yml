# ============================================================================= 
# Workflow: Fetch FCA Firm Individuals (Ad-hoc)
# =============================================================================
name: Fetch FCA Firm Individuals (Ad-hoc)

# We need write permission so that our final “merge” job can commit back to main.
permissions:
  contents: write

# Only triggered manually to avoid accidental runs on push/PR.
on:
  workflow_dispatch:
    inputs:
      chunks:
        description: 'Number of parallel chunks to split the FRN list into'
        required: true
        default: '4'
      limit:
        description: 'Max FRNs per chunk (blank = full list)'
        required: false
        default: ''

jobs:
  # -----------------------------------------------------------------------------
  # JOB 1: split
  #   - Divide the full FRN list into N start‐indices for parallel fetching.
  # -----------------------------------------------------------------------------
  split:
    runs-on: ubuntu-latest
    # Expose computed indices to downstream matrix
    outputs:
      chunk_list: ${{ steps.set-chunks.outputs.chunk_list }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        # Ensures fca-dashboard/data/all_frns_with_names.json is present

      - id: set-chunks
        name: Compute chunk start indices
        run: |
          # 1. Count total FRNs in the master list
          TOTAL=$(jq 'length' fca-dashboard/data/all_frns_with_names.json)

          # 2. Get desired parallelism from workflow dispatch
          CHUNKS=${{ github.event.inputs.chunks }}

          # 3. Compute evenly spaced start indices via a Python one-liner:
          #    - window size = ceil(TOTAL/CHUNKS)
          #    - indices = [0, size, 2*size, …]
          python3 -c "import math, json; total=int('$TOTAL'); n=int('$CHUNKS'); size=math.ceil(total/n); print(json.dumps(list(range(0,total,size))))" \
            > indices.json

          # 4. Expose the JSON array as a step output for the fetch matrix
          echo "chunk_list=$(cat indices.json)" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------------------
  # JOB 2: fetch
  #   - Parallel workers: each takes one start index and fetches that FRN slice.
  # -----------------------------------------------------------------------------
  fetch:
    needs: split
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Parse the chunk_list output into individual start values
        start: ${{ fromJson(needs.split.outputs.chunk_list) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch individuals chunk
        env:
          FCA_API_EMAIL: ${{ secrets.FCA_API_EMAIL }}
          FCA_API_KEY:   ${{ secrets.FCA_API_KEY }}
        run: |
          # 1. Determine this worker’s offset
          OFFSET=${{ matrix.start }}

          # 2. Pass through --limit if provided for quick tests
          if [ -n "${{ github.event.inputs.limit }}" ]; then
            LIMIT="--limit ${{ github.event.inputs.limit }}"
          else
            LIMIT=""
          fi

          # 3. Create output folder for this chunk
          mkdir -p "chunks/individuals-chunk-${OFFSET}"

          # 4. Invoke the Python fetch script (with built-in rate-limiting)
          python3 fca-dashboard/scripts/fetch_firm_individuals.py \
            --offset "$OFFSET" $LIMIT \
            --output "chunks/individuals-chunk-${OFFSET}/fca_individuals_by_firm.json"

      - name: Upload chunk artifact
        uses: actions/upload-artifact@v4
        with:
          name: individuals-chunk-${{ matrix.start }}
          path: chunks/individuals-chunk-${{ matrix.start }}/fca_individuals_by_firm.json

  # -----------------------------------------------------------------------------
  # JOB 3: merge
  #   - Download all chunk artifacts, merge them, and commit the final JSON.
  # -----------------------------------------------------------------------------
  merge:
    needs: fetch
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download all chunk artifacts
        uses: actions/download-artifact@v4
        with:
          path: chunks
          # Pulls every 'individuals-chunk-*' folder

      - name: Merge chunked JSONs
        run: |
          # Combine all partial mappings into one canonical file
          python3 fca-dashboard/scripts/merge_fca_individuals.py \
            chunks fca-dashboard/data/fca_individuals_by_firm.json

      - name: Commit & push merged result
        run: |
          # 1. Configure the bot’s identity
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"

          # 2. Stage the merged JSON (new, changed, or deleted)
          git add fca-dashboard/data/fca_individuals_by_firm.json

          # 3. Commit if there are staged changes vs. HEAD
          git diff --cached --quiet || git commit -m "chore(fca): merge firm individuals"

          # 4. Push back to main
          git push origin HEAD:main
