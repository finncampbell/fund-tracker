# ============================================================================= 
# Workflow: Fetch FCA Firm Individuals (Ad-hoc)
# =============================================================================
name: Fetch FCA Firm Individuals (Ad-hoc)

# Grant write so we can commit back to main
permissions:
  contents: write

# Manual trigger only
on:
  workflow_dispatch:
    inputs:
      chunks:
        description: 'Number of parallel chunks to split the FRN list into'
        required: true
        default: '4'
      limit:
        description: 'Max FRNs per chunk (blank = full list)'
        required: false
        default: ''

jobs:
  # -----------------------------------------------------------------------------
  # JOB 1: split
  #   - Partition the master FRN list into N start indices
  # -----------------------------------------------------------------------------
  split:
    runs-on: ubuntu-latest
    outputs:
      chunk_list: ${{ steps.set-chunks.outputs.chunk_list }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - id: set-chunks
        name: Compute chunk start indices
        run: |
          # Count total FRNs
          TOTAL=$(jq 'length' fca-dashboard/data/all_frns_with_names.json)
          # Desired number of chunks
          CHUNKS=${{ github.event.inputs.chunks }}
          # Build JSON array of start indices in one Python line
          python3 -c "import math, json; total=int('$TOTAL'); n=int('$CHUNKS'); size=math.ceil(total/n); print(json.dumps(list(range(0,total,size))))" \
            > indices.json
          # Expose for matrix
          echo "chunk_list=$(cat indices.json)" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------------------
  # JOB 2: fetch
  #   - Parallel matrix: each runner fetches one slice via our rate-limited script
  # -----------------------------------------------------------------------------
  fetch:
    needs: split
    runs-on: ubuntu-latest
    strategy:
      matrix:
        start: ${{ fromJson(needs.split.outputs.chunk_list) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch individuals chunk
        env:
          FCA_API_EMAIL: ${{ secrets.FCA_API_EMAIL }}
          FCA_API_KEY:   ${{ secrets.FCA_API_KEY }}
        run: |
          # This workerâ€™s offset
          OFFSET=${{ matrix.start }}
          # Pass --limit if supplied
          if [ -n "${{ github.event.inputs.limit }}" ]; then
            LIMIT="--limit ${{ github.event.inputs.limit }}"
          else
            LIMIT=""
          fi
          # Prepare output folder
          mkdir -p "chunks/individuals-chunk-${OFFSET}"
          # Fetch via Python script (handles pagination + rate limiting)
          python3 fca-dashboard/scripts/fetch_firm_individuals.py \
            --offset "$OFFSET" $LIMIT \
            --output "chunks/individuals-chunk-${OFFSET}/fca_individuals_by_firm.json"

      - name: Upload chunk artifact
        uses: actions/upload-artifact@v4
        with:
          name: individuals-chunk-${{ matrix.start }}
          path: chunks/individuals-chunk-${{ matrix.start }}/fca_individuals_by_firm.json

  # -----------------------------------------------------------------------------
  # JOB 3: merge
  #   - Merge all chunk artifacts into the single UI JSON under docs/
  # -----------------------------------------------------------------------------
  merge:
    needs: fetch
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download all chunk artifacts
        uses: actions/download-artifact@v4
        with:
          path: chunks

      - name: Merge into UI data folder
        run: |
          # Ensure the docs data folder exists
          mkdir -p docs/fca-dashboard/data
          # Run merge script, targeting the docs path
          python3 fca-dashboard/scripts/merge_fca_individuals.py \
            chunks docs/fca-dashboard/data/fca_individuals_by_firm.json

      - name: Commit & push merged result
        run: |
          # Configure commit author
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"

          # Stage the single JSON file in docs/
          git add docs/fca-dashboard/data/fca_individuals_by_firm.json

          # Commit only if there are staged changes vs. HEAD
          git diff --cached --quiet || \
            git commit -m "chore(fca): merge firm individuals into docs"

          # Push back to main
          git push origin HEAD:main
