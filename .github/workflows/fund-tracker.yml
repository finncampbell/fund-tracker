name: Fund Tracker

permissions:
  contents: write
  actions: read

concurrency:
  group: fund-tracker-main
  cancel-in-progress: false

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date for ingest (YYYY-MM-DD, today, or yesterday)'
        required: false
        default: 'today'
      end_date:
        description: 'End date for ingest (YYYY-MM-DD, today, or yesterday)'
        required: false
        default: 'today'

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      CH_API_KEY:   ${{ secrets.CH_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # 1) Check out the repo at the very latest main
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --prefer-binary -r requirements.txt

      # 4) Run fund_tracker (manual or scheduled)
      - name: Run fund_tracker
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            python fund_tracker.py \
              --start_date "${{ github.event.inputs.start_date }}" \
              --end_date   "${{ github.event.inputs.end_date }}"
          else
            python fund_tracker.py
          fi

      # 5) Fetch directors (exactly as before)
      - name: Fetch directors for relevant companies
        run: |
          python fetch_directors.py

      # 6) Save rate_limiter.db to cache for next run (optional)
      - name: Save rate_limiter.db to cache
        uses: actions/cache@v3
        with:
          path: rate_limiter.db
          key: rate-limiter-db

      # 7) Commit & push any data changes (no rebasing/pulling here)
      - name: Commit updated data files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/assets/data/master_companies.csv \
                  docs/assets/data/master_companies.xlsx \
                  docs/assets/data/relevant_companies.csv \
                  docs/assets/data/relevant_companies.xlsx \
                  docs/assets/data/directors.json

          if git diff --cached --quiet; then
            echo "No changes to data â€” skipping commit"
            exit 0
          fi

          git commit -m "chore(data): update companies & directors [skip ci]"

          # Attempt to push. If someone else beat us to main, git push will fail.
          if git push origin HEAD:main; then
            echo "Push succeeded"
          else
            echo "::warning::Push failed due to non-fast-forward. Another change was merged."
            exit 0
          fi
